Use Windows.pkg
Use cJsonObject.pkg
Use JSONHelper\cJsonHttpBinaryTransfer.pkg
Use JSONHelper\cWSJson.pkg
Use APIStructs\FedExAPICommon.pkg

Use APIStructs\FedExValidateAddress\stFedExAddressRequest.pkg
Use APIStructs\FedExValidateAddress\stFedExAddressResponse.pkg

Class cFedExAddressValidationAPI is a cFedExAPI
    Procedure Construct_Object
        Forward Send Construct_Object

        Set psLogFileName to "FedExAddressValidation"

        Property stFedExAddressRequest ptFedExAddressRequest
        Property stFedExAddressResponse ptFedExAddressResponse
    End_Procedure

    Function ValidateAddress stFedExAddressRequest tAddressRequest String sClientID String sClientPass String sAccontNum Returns Boolean
        Boolean bOK
        stFedExAddressResponse tResponse

        Set ptFedExAddressRequest  to tAddressRequest //Save this for later use in FillJSONRequest.

        //Save these for use in getting the FedEx API token if the current one has expired.
        Set psClientID      to sClientID
        Set psClientPass    to sClientPass
        Set psAccountNum    to sAccontNum

#IFDEF Is$WebApp
#ELSE
        Send Cursor_Wait            to Cursor_Control
#ENDIF        

        Get PostJSON    to bOK
//        If bOK Begin
//            Get ptFedExCreateShipmentResponse   to tResponse //Pull the changes for Lat/Long and County to pass back.
//        End
        
#IFDEF Is$WebApp
#ELSE
        Send Cursor_Ready   to Cursor_Control
#ENDIF        

        Function_Return bOK
    End_Function

    Function SetupPathAndParameters Returns String
        String sURL sParameters

        Move "/address/v1/addresses/resolve"    to sURL

        Function_Return sURL
    End_Function

    Function FillJSONRequest Returns Handle
        Handle hJSON
        stFedExAddressRequest tRequest

        Forward Get FillJSONRequest to hJSON

        Get ptFedExAddressRequest   to tRequest
        Send DataTypeToJson of hJSON tRequest

//        If (pbRemoveNullMembers(Self)) Begin
//            Set pbRequireAllMembers of hJSON    to False
//            Send RemoveBlankFedExMembers hJSON tRequest
//            Send RemoveEmptyMembers hJSON True True True
//        End
//
//        //It will only do this when you're debugging and skip the If and go in manually...
//        If False Begin
//            String  sTemp
//            Get Stringify   of hJSON    to sTemp
//
//            Boolean bValid
//            Get ParseString of hJSON sTemp  to bValid
//        End

        Function_Return hJSON
    End_Function

//    //Remove specific nodes that we don't want to send if they're empty.  Otherwise FedEx gets confused...
//    Procedure RemoveBlankFedExMembers Handle hRequest stFedExCreateShipment tCreateShipmentRequest
//        Handle  hRequestedShipment hLine
//        String  sNodeName
//
//        Get Member  of hRequest "requestedShipment" to hRequestedShipment
//
//        //Remove requestedShipment nodes we don't fill out
//        Send RemoveMember   of hRequestedShipment "totalDeclaredValue"
//        Send RemoveMember   of hRequestedShipment "soldTo"
//        Send RemoveMember   of hRequestedShipment "totalWeight"
//        Send RemoveMember   of hRequestedShipment "origin"
//        Send RemoveMember   of hRequestedShipment "emailNotificationDetail"
//        Send RemoveMember   of hRequestedShipment "variableHandlingChargeDetail"
//        Send RemoveMember   of hRequestedShipment "shippingDocumentSpecification"
//
//        //Check to see if we filled out anything in specific elements that are
//        // only conditionally filled and remove them if blank.
//        If (SizeOfArray(tCreateShipmentRequest.requestedShipment.shipmentSpecialServices.specialServiceTypes) = 0) Begin
//            Send RemoveMember   of hRequestedShipment "shipmentSpecialServices"
//        End
//
//        If (tCreateShipmentRequest.requestedShipment.customsClearanceDetail.commercialInvoice.termsOfSale = "") Begin
//            Send RemoveMember   of hRequestedShipment "customsClearanceDetail"
//        End
//
//        If (tCreateShipmentRequest.requestedShipment.smartPostInfoDetail.hubId = "") Begin
//            Send RemoveMember   of hRequestedShipment "smartPostInfoDetail"
//        End
//
//        //We have to remove the declaredValue node from all the requestedPackageLineItems because we don't use it and it's causing FedEx to throw parse errors.
//        //  Rather than create the node, then loop through to find it and remove it, I'm going to take it out of the struct.
//
//        Send Destroy of hRequestedShipment
//    End_Procedure

    Function ParseJSONResponse Handle hJSONResponse Returns Boolean
        Boolean bOK
        stFedExAddressResponse tResponse
        String  sErr

//        //It will only do this when you're debugging and skip the If and go in manually...
//        If False Begin
//            String  sTemp
//            Get Stringify   of hJSONResponse    to sTemp
//        End

        Set pbRequireAllMembers of hJSONResponse    to False
        Get JsonToDataType      of hJSONResponse    to tResponse
        Get psParseError        of hJSONResponse    to sErr

//ToDo MRM I don't think psParseError is ever going to be set here from JsonToDataType...
        If (Trim(sErr) > '') Begin
            Move False  to bOK
            Send LogError "" "" sErr
            Set psLastError to sErr
        End
        Else Begin
            Move True   to bOK

            Set ptFedExAddressResponse  to tResponse
        End

        Function_Return bOK
    End_Function

End_Class
